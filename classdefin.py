#определение классов используемых в программе
class User:
    def create_user(self):
        """
        Функция создает пользователя.
        Пользователь иммеет следующие атрибуты:
            - Имя;
            - Фамилия;
            - Подразделение;
            - Должность;
            - Уровень доступа (права на создание, изменение заявок; права на создание, изменение, удаление оборудования.)
            - дата создания аккаунта;
            - логин;
            - Пароль (преобразование в Хеш);
            - адрес электроной почты;
        :return:bool (tru or False)
        """

        name_user = ''
        last_name_user = ''
        divisions_user = ''
        position_user = ''
        login_user = ''
        password_name_user = ''
            if name_user != db_name_user: name_user = str(input('Введите Ваше имя: '))
            elif last_name_user != db_last_name_user last_name_user = str(input('Введите Вашу фамилию: '))
            elif divisions_user != db_divisions_user divisions_user = str(input('Введите Ваше подразделение: '))
            elif position_user != db_position_user position_user = str(input('Введите Вашу должность: '))
            elif login_user != db_login_user login_user = str(input('Введите Ваш логин: '))
            elif password_name_user != db_password_name_user password_name_user = str(input('Введите Ваш пароль: '))
        access_level_user = default_access  # переменная default_access должна возвращаться после регистрации пользователя с предустановленным значением



        pass

    def change_user(self):
        """
        Функция изменяет данные пользователей.
        Изменяет следующие атрибуты:
            - Имя;
            - Фамилия;
            - Подразделение;
            - Должность;
            - Уровень доступа (права на создание, изменение заявок; права на создание, изменение, удаление оборудования.)
            - дата создания аккаунта;
            - логин;
            - Пароль (преобразование в Хеш);
            - адрес электроной почты;
        :return:
        """
        pass

    def del_user(self):
        """
        удаляет данные пользователя
        :return:
        """
        pass
    def u_lookdata(self):
        """
        просмотр личных данных пользователя:
        в зависимости  от уровня пользователя разрешен просмотр
            - имени;
            - фамилии;
            - пароля;
            - контактных данных;
            - должности;
            - подраздаления;
            - уровня доступа;
            - дата создания аккаунта;
        :return:
        """
        pass

    def u_creatservice(self):
        """
        просмотр созданных пользователем заявок в зависимости от уровня пользователя
        резрешен просмотр как созданных заявок пользователем так и его подчиннеными
        :return:
        """
        pass

    def u_work(self):
        """
        просмотр заявок адресованных пользователю, в зависимости от уровня пользователя
        резрешен просмотр как заявок пользователя так и его подчинненых
        :return:
        """
        pass

    def u_equip(self):
        """
        просмотр оборудования принадлежащего пользователю,
        просмотр оборудования находящегося у пользователя в ремонте
        :return:
        """
        pass
    def u_login(self):
        """Вход пользователя в систему"""
        pass

class Equip:
    def new_equip(self):
        """
        Создание нового оборудованиея. присвоение ему номенклатурного номера, закрепление его за подразделением,
        закрепление его за конкретным пользователем(User), указание серийного номера, описания, технических характеристик,
        даты ввода в эксплуатацию, комплектации (является ли частью более крупного оборудования, если да то необходимо придумать дерево иерархии
        по которому оборудование должно входить в древовидную структуру для отслеживания его состояния, то есть замены какого то узла
        входящего в состав более крупного узла (датчик на шатле входит в сосстав шатла, а шатл входит в состав автоматизированного
        склада)).
        :return:  true or false  в зависимости от того успешно ли прошла запись в базу данных.
        """
        pass

    def change_equip(self):
        """
        изменение оборудования связанное с эксплуатацией оборудования, то есть его поломки, заявки на ремонт,
        текущей ремонт, замена оборудования, списагние.
        :return:
        """
        pass

    def del_equip(self):
        pass
    def analysis_of_equip(self):
        pass

class Monitoring_service:
    def create_service(self):

        pass

    def service_status(self):
        pass

    def delete_service(self):
        pass

class Db_work:
    def db_connection(self):
        pass

    def edit_table(self):
        pass
    def new_table(self):
        pass
    def read_table(self):
        pass

